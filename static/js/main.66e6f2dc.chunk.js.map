{"version":3,"sources":["App.jsx","config.js","components/list/List.js","components/header/Header.js","components/comments/Comments.jsx","serviceWorker.js","index.js"],"names":["currentPage","previousPage","previousItemId","API_URI","List","props","className","news","map","item","i","key","id","href","url","target","title","points","user","time_ago","comments_count","to","moreLinkProps","onClick","e","triggerMoreClick","Header","src","alt","arrowStyle","backgroundImage","backgroundSize","height","width","backgroundRepeat","display","Comments","renderComments","comments","comment","style","dangerouslySetInnerHTML","__html","content","axios","require","App","useState","undefined","setNews","setComments","handlePathMatch","queryStrings","queryString","parse","location","search","_currentPage","Number","p","console","log","get","headers","then","response","status","data","catch","error","handleCommentsClick","pathname","slice","Fragment","exact","path","render","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.66e6f2dc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect\n} from \"react-router-dom\";\nimport queryString from 'query-string'\n\nimport \"./App.css\";\nimport \"./output.css\";\n\nimport { API_URI } from \"./config\";\nimport List from './components/list/List';\nimport Header from './components/header/Header';\nimport Comments from './components/comments/Comments';\n\nconst axios = require(\"axios\");\n\nlet currentPage,\n    previousPage,\n    previousItemId;\n\nfunction App() {\n    const [news, setNews] = useState(undefined);\n    const [comments, setComments] = useState(undefined);\n\n    const getNews = (url) => {\n        console.log(url);\n        \n        axios\n            .get(url, { headers: { \"Access-Control-Allow-Origin\": \"*\" }})\n            .then(response => {\n                if (response && response.status === 200) {\n                    setNews(response.data);\n                } else {\n                    setNews(null);\n                }\n            })\n            .catch(error => {\n                setNews(null);\n            });\n    };\n\n    const getComments = (url) => {\n        axios\n            .get(url, { headers: { \"Access-Control-Allow-Origin\": \"*\" }})\n            .then(response => {\n                if (response && response.status === 200) {\n                    setComments(response.data);\n                } else {\n                    setComments(null);\n                }\n            })\n            .catch(error => {\n                setComments(null);\n            });\n    };\n\n    const triggerMoreClick = () => {\n        setNews(undefined);\n    };\n\n    const handlePathMatch = (props) => {\n        const queryStrings = queryString.parse(props.location.search);\n        const _currentPage = Number(queryStrings.p);\n\n        if (_currentPage !== previousPage) {\n            previousPage = _currentPage;\n            currentPage = _currentPage;\n            setNews(undefined);\n            getNews(API_URI + 'news/' + _currentPage + '.json');\n        }\n\n        if (news === undefined) {\n            return <div><p>Loading...</p></div>\n        } else if (news === null) {\n            return <div><p>Error!</p></div>\n        } else {\n            return <List triggerMoreClick={triggerMoreClick} currentPage={currentPage} news={news}></List>\n        }\n    };\n\n    const handleCommentsClick = (props) => {\n        debugger;\n        const id = props.location.pathname.slice(1);\n        if (id !== previousItemId) {\n            previousItemId = id;\n            setComments(undefined);\n            getComments(API_URI + 'item/' + id + '.json');\n        }\n        \n\n        if (comments === undefined) {\n            return <div><p>Loading...</p></div>\n        } else if (comments === null) {\n            return <div><p>Error!</p></div>\n        } else {\n            return <Comments item={comments}></Comments>\n        }\n    };\n\n\n    return (\n        <React.Fragment>\n            <header className='container mx-auto px-4 py-8'>\n                <Header></Header>\n            </header>\n            <main className='container mx-auto px-4 pb-4'>\n                <Router>\n                    <Switch>\n                        <Route exact path=\"/\">\n                            <Redirect to=\"/news?p=1\" />\n                        </Route>\n                        <Route path='/news' render={(props) => handlePathMatch(props)} />\n                        <Route path='/:id' render={(props) => handleCommentsClick(props)}></Route>\n                    </Switch>\n                </Router>\n            </main>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","const API_URI = 'https://api.hnpwa.com/v0/';\n\nexport {\n    API_URI\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Link\n} from \"react-router-dom\";\n\nconst List = props => {\n    const MoreLink = (moreLinkProps) => {\n        const handleMoreClick = (e) => {\n            props.triggerMoreClick();\n        };\n\n        return (\n            <span onClick={handleMoreClick}>\n                <Link to={'/news?p=' + (props.currentPage ? props.currentPage + 1 : 2)}>More</Link>\n            </span>\n        )\n    };\n\n    return (\n        <section className='section'>\n            {props.news && props.news.map((item, i) =>\n                <div key={item.id} className=\"pb-2\">\n                    <a href={item.url} target='blank' className=\"md:text-xl lg:text-2xl text-gray-800 tracking-wide\">\n                        <span className=\"text-gray-600 md:text-base lg:text-xl\">{(props.currentPage*30 - 29 + i) + '.'} &nbsp;&nbsp;</span>\n                        {item.title}\n                    </a>\n                    <p className=\"text-base text-gray-700\">\n                        <span>{item.points} points</span>&nbsp;\n                        <span>by {item.user}</span>&nbsp;\n                        <span>{item.time_ago}</span>&nbsp;\n                        |&nbsp;{item.comments_count ? <Link to={'/' + item.id}>{item.comments_count} comments</Link> : <span>0 comments</span>}\n                    </p>\n                </div>\n            )}\n            <MoreLink />\n        </section>\n    );\n};\n\nList.propTypes = {\n    news: PropTypes.array\n};\n\nexport default List;","import React from 'react';\n\nconst Header = props => {\n    return (\n        <div>\n            <img src=\"brand_img.png\" alt='logo' className=\"w-2/3 lg:w-1/3\"/>\n        </div>\n    );\n};\n\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst arrowStyle = {\n    backgroundImage: \"url(https://news.ycombinator.com/grayarrow2x.gif)\",\n    backgroundSize: \"13px\",\n    height: \"13px\",\n    width: \"13px\",\n    backgroundRepeat: \"no-repeat\",\n    display: \"inline-block\"\n};\n\nconst Comments = (props) => {\n    const item = props.item;\n    const renderComments = function (comments) {\n        return comments.map(comment => {\n            return (\n                <div className=\"ml-6 mt-4\" key={comment.id}>\n                    <p>\n                        <span><span style={arrowStyle} className=\"text-xl\"></span>&nbsp;&nbsp;{comment.user} </span>\n                        <span className=\"text-gray-600\">{comment.time_ago}</span>\n                    </p>\n                    <p dangerouslySetInnerHTML={{__html: comment.content}}></p>\n                    {renderComments(comment.comments)}\n                </div>\n            );\n        });\n    };\n\n    return (\n        <div>\n            <p className=\"text-2xl text-gray-800 tracking-wide\">\n                {item.title}\n            </p>\n            <p className=\"text-base text-gray-700 pb-3\">\n                <span>{item.points} points</span>&nbsp;\n                <span>by {item.user}</span>&nbsp;\n                <span>{item.time_ago}</span>&nbsp;\n                |&nbsp;{item.comments_count ? item.comments_count + ' comments' : <span>0 comments</span>}\n            </p>\n            {renderComments(item.comments)}\n        </div>\n\n    );\n};\n\nComments.propTypes = {\n    id: PropTypes.number,\n    title: PropTypes.string,\n    points: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.object\n    ]),\n    user: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.object\n    ]),\n    time: PropTypes.number,\n    time_ago: PropTypes.string,\n    content: PropTypes.string,\n    deleted: PropTypes.bool,\n    dead: PropTypes.bool,\n    type: PropTypes.string,\n    url: PropTypes.string,\n    domain: PropTypes.string,\n    comments: PropTypes.arrayOf(Comments),\n    level: PropTypes.number,\n    comments_count: PropTypes.number\n};\n\nexport default Comments;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}